//ejercicio numero 5 by Kevin >Noriega Pastas
#include <iostream>
#include <cstdlib> 
#include <ctime>   
using namespace std;

void llenadovec(int vec[],int tam);
void ordB(int vec[],int tam);
void ordI(int vec[],int tam);
void ordS(int vec[],int tam);
int axQ(int bajo, int alto);
void ordQ(int vec[], int bajo, int alto);
void mvec(int vec[],int tam);

int main() {
    int tam;
    cout << "digite el tamaÃ±o del vector: ";
    cin >> tam;

    int vec[tam];

    int opc;
    do {
        cout << "\nMENU PRINCIPAL" << endl;
        cout << "1. Llenado" << endl;
        cout << "2. Ordenamiento" << endl;
        cout << "3. Mostrar" << endl;
        cout << "4. Salir" << endl;
        cout << "Ingrese su opcion: ";
        cin >> opc;

        switch (opc) {
            case 1:
                llenadovec(vec, tam);
                cout << "Vector con numeros aleatorios.\n";
                break;
            case 2: {
                int op;
                do {
                    cout << "\nSUBMENU DE ORDENAMIENTO" << endl;
                    cout << "1. Ordenamiento Burbuja" << endl;
                    cout << "2. Ordenamiento Insercion" << endl;
                    cout << "3. Ordenamiento Shell" << endl;
                    cout << "4. Ordenamiento QuickSort" << endl;
                    cout << "5. regresar" << endl;
                    cout << "Ingrese su opcion: ";
                    cin >> op;

                    switch (op) {
                        case 1:
                            ordB(vec, tam);
                            cout << "Vector ordenado por Burbuja." << endl;
                            break;
                        case 2:
                            ordI(vec, tam);
                            cout << "Vector ordenado por Insercion." << endl;
                            break;
                        case 3:
                            ordS(vec, tam);
                            cout << "Vector ordenado por Shell." << endl;
                            break;
                        case 4:
                            ordQ(vec, 0, tam - 1);
                            cout << "Vector ordenado por QuickSort." << endl;
                            break;
                        case 5:
                            break;
                        default:
                            cout << "Opcion invalida ingrese una opcion valida." << endl;
                    }
                } while (op != 5);
                break;
            }
            case 3:
                mvec(vec, tam);
                break;
            case 4:
                cout << "Saliendo del programa." << endl;
                break;
            default:
                cout << "Opcion invalida ingrese una opcion valida." << endl;
        }
    } while (opc != 4);

    return 0;
}
void llenadovec(int vec[], int tam) {
    srand(time(0)); 
    for (int i = 0; i < tam; ++i) {
        vec[i] = rand() % 500 + 1; 
    }
}
void ordB(int vec[], int tam) {
    for (int i = 0; i < tam - 1; ++i) {
        for (int j = 0; j < tam - i - 1; ++j) {
            if (vec[j] > vec[j + 1]) {
                int temp = vec[j];
                vec[j] = vec[j + 1];
                vec[j + 1] = temp;
            }
        }
    }
}

void ordI(int vec[], int tam) {
    for (int i = 1; i < tam; ++i) {
        int key = vec[i];
        int j = i - 1;
        while (j >= 0 && vec[j] > key) {
            vec[j + 1] = vec[j];
            j = j - 1;
        }
        vec[j + 1] = key;
    }
}
void ordS(int vec[], int tam) {
    for (int gap = tam / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < tam; ++i) {
            int temp = vec[i];
            int j;
            for (j = i; j >= gap && vec[j - gap] > temp; j -= gap) {
                vec[j] = vec[j - gap];
            }
            vec[j] = temp;
        }
    }
}
int auxQ(int vec[], int bajo, int alto) {
    int pivote = vec[alto];
    int i = (bajo - 1);

    for (int j = bajo; j <= alto - 1; j++) {
        if (vec[j] < pivote) {
            i++;
            swap(vec[i], vec[j]);
        }
    }
    swap(vec[i + 1], vec[alto]);
    return (i + 1);
}
void ordQ(int vec[], int bajo, int alto) {
    if (bajo < alto) {
        int pi = auxQ(vec, bajo, alto);
        ordQ(vec, bajo, pi - 1);
        ordQ(vec, pi + 1, alto);
    }
}
void mvec(int vec[], int tam) {
    cout << "Vector: ";
    for (int i = 0; i < tam; ++i) {
        cout << vec[i] << " ";
    }
    cout << endl;
}
